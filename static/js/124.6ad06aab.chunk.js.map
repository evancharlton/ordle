{"version":3,"file":"static/js/124.6ad06aab.chunk.js","mappings":"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","sources":["App/WithLanguage/Builder/reducer.ts","webpack://ordle/./src/App/WithLanguage/Builder/Builder.module.css?a6a6","App/WithLanguage/Builder/Builder.tsx"],"sourcesContent":["type State = {\n  mode: \"solution\" | \"guess\";\n  solution: string;\n  guess: string;\n  guesses: string[];\n  valid: boolean;\n  error: string;\n};\n\ntype Action =\n  | { mode: \"reset\" }\n  | { mode: \"add-letter\"; letter: string }\n  | { mode: \"commit\" }\n  | { mode: \"remove-letter\" }\n  | { mode: \"remove-guess\"; guess: string }\n  | { mode: \"reset-guess\" };\n\nconst never = (v: never) => {\n  throw new Error(`Impossible situation: ${v}`);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  const { mode } = action;\n  switch (mode) {\n    case \"reset\": {\n      return {\n        ...state,\n        mode: \"solution\",\n        solution: \"\",\n        guess: \"\",\n        guesses: [],\n        valid: false,\n        error: \"\",\n      };\n    }\n\n    case \"add-letter\": {\n      if (state.mode === \"solution\") {\n        const solution = (state.solution + action.letter).substring(0, 5);\n        return {\n          ...state,\n          solution,\n          valid: solution.length === 5,\n          error: \"\",\n        };\n      } else if (state.mode === \"guess\") {\n        const guess = (state.guess + action.letter).substring(0, 5);\n        return {\n          ...state,\n          guess,\n          valid: guess.length === 5,\n          error: \"\",\n        };\n      }\n      return state;\n    }\n\n    case \"commit\": {\n      if (!state.valid) {\n        return {\n          ...state,\n          error: \"Ikke nok bokstaver\",\n        };\n      }\n\n      if (state.mode === \"solution\") {\n        return {\n          ...state,\n          mode: \"guess\",\n        };\n      } else if (state.mode === \"guess\") {\n        return {\n          ...state,\n          guesses: [\n            ...state.guesses.filter((g) => g !== state.guess),\n            state.guess,\n          ],\n          guess: \"\",\n          valid: false,\n        };\n      }\n      return state;\n    }\n\n    case \"remove-letter\": {\n      if (state.mode === \"solution\") {\n        const solution = state.solution.substring(\n          0,\n          Math.max(0, state.solution.length - 1)\n        );\n        return {\n          ...state,\n          solution,\n          valid: solution.length === 5,\n          error: \"\",\n        };\n      } else if (state.mode === \"guess\") {\n        const guess = state.guess.substring(\n          0,\n          Math.max(0, state.guess.length - 1)\n        );\n        return {\n          ...state,\n          guess,\n          valid: guess.length === 5,\n          error: \"\",\n        };\n      }\n      return state;\n    }\n\n    case \"remove-guess\": {\n      return {\n        ...state,\n        guesses: state.guesses.filter((guess) => guess !== action.guess),\n      };\n    }\n\n    case \"reset-guess\": {\n      return {\n        ...state,\n        guess: \"\",\n      };\n    }\n\n    default: {\n      never(mode);\n      throw new Error(\"Impossible situation\");\n    }\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"info\":\"Builder_info__zES21\",\"container\":\"Builder_container__xqUy9\",\"grid\":\"Builder_grid__sUgrH\",\"words\":\"Builder_words__4xq5O\"};","import React, { useCallback, useEffect, useMemo, useReducer } from \"react\";\nimport {\n  MdRemoveCircleOutline,\n  MdOutlineArrowBack,\n  MdOutlineClear,\n  MdKeyboardReturn,\n} from \"react-icons/md\";\nimport Guess from \"../../../Game/Grid/Guess\";\nimport { ALPHABET } from \"../../../Game/Keyboard\";\nimport { Context } from \"../../Setup/GameLoader\";\nimport { reducer } from \"./reducer\";\nimport classes from \"./Builder.module.css\";\nimport { usePossibilities } from \"../../../Game/Grid/Remainder\";\n\nconst Blank: typeof MdRemoveCircleOutline = () => <></>;\n\nexport const Builder = () => {\n  const [state, dispatch] = useReducer(reducer, {\n    mode: \"solution\",\n    solution: \"\",\n    guess: \"\",\n    guesses: [],\n    valid: false,\n    error: \"\",\n  });\n  const { solution, guesses, guess, error, mode, valid } = state;\n\n  useEffect(() => {\n    const onKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      if (e.code === \"Enter\") {\n        dispatch({ mode: \"commit\" });\n        return;\n      }\n\n      if (e.code === \"Backspace\") {\n        dispatch({ mode: \"remove-letter\" });\n        return;\n      }\n\n      const letter = e.key.toLocaleLowerCase();\n      if (!ALPHABET[letter]) {\n        return;\n      }\n      dispatch({ mode: \"add-letter\", letter });\n    };\n\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, []);\n\n  const onGuessClick = useCallback(\n    (guess: string) => () => {\n      dispatch({ mode: \"remove-guess\", guess });\n    },\n    []\n  );\n\n  const renderedGuesses = useMemo(() => {\n    return guesses.map((g, i) => (\n      <Guess\n        key={`${g}-${i}`}\n        guess={g}\n        onClick={onGuessClick(g)}\n        Icon={MdRemoveCircleOutline}\n      />\n    ));\n  }, [guesses, onGuessClick]);\n\n  const filler = useMemo(() => {\n    if (guesses.length === 5) {\n      return null;\n    }\n\n    const out: React.ReactNode[] = [];\n    for (let i = 0; i < 4 - guesses.length; i += 1) {\n      out.push(\n        <Guess key={`filler-${i}`} guess={\"\"} onClick={() => {}} Icon={Blank} />\n      );\n    }\n    return out;\n  }, [guesses.length]);\n\n  return (\n    <Context.Provider value={{ word: solution, gameNumber: -1 }}>\n      <div className={classes.container}>\n        <div className={classes.grid}>\n          <div className={classes.info}>\n            <h1>Ordle puslespillbygger</h1>\n            <ol>\n              <li>Skriv et ord som er løsningen</li>\n              <li>Skriv ord som er gjetninger</li>\n              <li>Vis mulige løsninger på den høyre siden</li>\n            </ol>\n          </div>\n          {error && <span style={{ textAlign: \"center\" }}>{error}</span>}\n          {renderedGuesses}\n          <Guess\n            guess={guess}\n            Icon={\n              mode === \"guess\"\n                ? valid\n                  ? MdKeyboardReturn\n                  : MdOutlineArrowBack\n                : Blank\n            }\n            onClick={() => {\n              if (valid && guess.length === 5) {\n                dispatch({ mode: \"commit\" });\n              } else {\n                dispatch({ mode: \"reset-guess\" });\n              }\n            }}\n          />\n          {filler}\n          <Guess\n            guess={solution}\n            Icon={\n              mode === \"solution\"\n                ? valid\n                  ? MdKeyboardReturn\n                  : MdOutlineArrowBack\n                : MdOutlineClear\n            }\n            onClick={() => {\n              if (mode === \"solution\" && valid) {\n                dispatch({ mode: \"commit\" });\n              } else {\n                dispatch({ mode: \"reset\" });\n              }\n            }}\n          />\n        </div>\n        <Remainder guesses={guesses} />\n      </div>\n    </Context.Provider>\n  );\n};\n\nconst Remainder = ({ guesses }: { guesses: string[] }) => {\n  const { remainders: possibilities, formattedCount } =\n    usePossibilities(guesses);\n\n  const list = useMemo(() => {\n    if (possibilities.length > 3000) {\n      return (\n        <div style={{ textAlign: \"center\" }}>\n          <em>(masse ord)</em>\n        </div>\n      );\n    }\n    return (\n      <ul>\n        {possibilities.sort().map((word) => (\n          <li key={word}>{word}</li>\n        ))}\n      </ul>\n    );\n  }, [possibilities]);\n\n  return (\n    <div className={classes.words}>\n      <h2>{formattedCount} mulige</h2>\n      {list}\n    </div>\n  );\n};\n"],"names":["reducer","state","action","mode","solution","guess","guesses","valid","error","letter","substring","length","filter","g","Math","max","v","Error","never","Blank","Builder","useReducer","dispatch","useEffect","onKeyDown","e","ctrlKey","metaKey","code","key","toLocaleLowerCase","ALPHABET","window","addEventListener","removeEventListener","onGuessClick","useCallback","renderedGuesses","useMemo","map","i","Guess","onClick","Icon","MdRemoveCircleOutline","filler","out","push","value","word","gameNumber","className","classes","style","textAlign","MdKeyboardReturn","MdOutlineArrowBack","MdOutlineClear","Remainder","usePossibilities","possibilities","remainders","formattedCount","list","sort"],"sourceRoot":""}